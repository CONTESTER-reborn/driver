name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  PYTHON_VERSION: "3.10"
  POETRY_VERSION: "1.7.1"


jobs:
  code-quality:
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.10" ]
        poetry-version: [ "1.7.1" ]
        os: [ ubuntu-latest ]

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: ${{ matrix.poetry-version }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Check pyproject.toml validity
        run: poetry check --no-interaction

      - name: Cache dependencies
        id: cache-deps
        uses: actions/cache@v2.1.5
        with:
          path: ${{github.workspace}}/.venv
          key: ${{ matrix.os }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: ${{ matrix.os }}-

      - name: Install dependencies
        if: steps.cache-deps.cache-hit != 'true'
        run: |
          poetry config virtualenvs.in-project true
          poetry install --no-interaction

      - name: Run flake8
        run: poetry run flake8 . --count --show-source --statistics
      - name: Run isort
        run: poetry run isort . --check
      - name: Run mypy
        run: poetry run mypy .

  docker-tests:
    name: Docker tests
    needs: [ code-quality ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build the project
        run: docker compose up -d --build

      - name: Run tests
        run: docker compose exec -T driver poetry run python -m pytest
